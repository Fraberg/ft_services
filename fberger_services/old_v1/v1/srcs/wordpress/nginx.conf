# https://www.digitalocean.com/community/tutorials/understanding-the-nginx-configuration-file-structure-and-configuration-contexts
# http://nginx.org/en/docs/dirindex.html
# https://doc.ubuntu-fr.org/nginx

worker_processes auto; # the number of simultaneous connections
pid /run/nginx.pid; # defines a file that will store the process ID of the main process.

events {
	# The “events” context is contained within the “main” context. 
	# It is used to set global options that affect how Nginx handles connections at a general level. 
	# There can only be a single events context defined within the Nginx configuration.

	worker_connections 768;
	# multi_accept on;
}

http {
	# When configuring Nginx as a web server or reverse proxy, the “http” context will hold the majority of the configuration.
	# This context will contain all of the directives and other contexts necessary to define how the program will handle HTTP or HTTPS connections.

	# sendfile: enables or disables the use of sendfile()
	sendfile on;
	# tcp_nopush: enabling the option allows
	# 	sending the response header and the beginning of a file in one packet, on Linux and FreeBSD 4.*;
	# 	sending a file in full packets.
	tcp_nopush on;
	# tcp_nodelay: enables or disables the use of the TCP_NODELAY option
	tcp_nodelay on;
	# keepalive_timeout: sets a timeout during which a keep-alive client connection will stay open on the server side
	keepalive_timeout 65;
	types_hash_max_size 2048; # sets the maximum size of the types hash tables

	include /etc/nginx/mime.types;
	default_type application/octet-stream;

	# access_log : Vous retrouverez dans votre fichier access.log les GET'S/POST'S de chaque visiteur visitant votre site.
	# sets the path (also format, and configuration) for a buffered log write
	# error_log: ici à contrario vous retrouverez dans votre fichier error.log les erreurs 403, 404, 500, 503, venant de vos visiteurs (par exemple).
	access_log /var/log/nginx/access.log;
	error_log /var/log/nginx/error.log;

	# gzip: iltre qui compresse les requêtes de type ACK à l'aide de la méthode « gzip ».
	# Souvent, ça permet de réduire la taille des données transmises. 
	# Nous pouvons via ce module, réduire de moitié les données transmises, voir même plus
	gzip on; # Enables or disables gzipping of responses.

	server {
		# server_name: component used to select a server block for processing
		server_name ft_services;
		# listen: The ip address / port combination that this server block is designed to respond to.
		listen 80 default_server;
		listen [::]:80 default_server;

		# document root (declaring at a high level allows you to avoid unnecessary repetition between sibling contexts)
		# sets the root directory for requests
		root /var/www/html;
		index index.php;

		# ~: expressions régulières (~* - insensible à la casse)

		# location match_modifier location_match { ... }: each location is used to handle a certain type of client request
		# ici le location block gère toutes les demandes dont les URIs se terminent par jpg|jpeg|gif|css|png|js|ico|xml
		location ~* ^.+.(jpg|jpeg|gif|css|png|js|ico|xml)$ {
			access_log off;
			expires 30d;
		}

		location ~ /\.ht {
			deny all; # Denies access for the specified network or address
		}

		location ~ \.php$ {
			fastcgi_pass localhost:9000; # Sets the address of a FastCGI server. The address can be specified as a domain name or IP address, and a port
			fastcgi_index index.php;
			include fastcgi.conf;
		}
	}
}