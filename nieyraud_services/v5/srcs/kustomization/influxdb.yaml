apiVersion: v1
kind: Service
metadata:
  name: influxdb
  labels:
    app: ft_services
spec:
  ports:
  - port: 8086
    targetPort: 8086
  selector:
    app: ft_services
    tier: influxdb
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: influxdb-pv-claim
  labels:
    app: ft_services
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: influxdb
  labels:
    app: ft_services
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ft_services
      tier: influxdb
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: ft_services
        tier: influxdb
    spec:
      containers:
      - image: influxdb:1.5.4-alpine
        name: influxdb
        ports:
        - containerPort: 8086
          name: influxdb
        volumeMounts:
          - name: influx-persistent-storage
            mountPath: /var/lib/influxdb
          - name: influxd-config
            mountPath: /etc/influxdb/
      volumes:
      - name: influx-persistent-storage
        persistentVolumeClaim:
          claimName: influxdb-pv-claim
      - name: influxd-config
        configMap:
          name: influxd-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: influxd-config
data:
  influxdb.conf: |+
    [meta]
      dir = "/var/lib/influxdb/meta"

    [data]
      dir = "/var/lib/influxdb/data"
      engine = "tsm1"
      wal-dir = "/var/lib/influxdb/wal"

    [http]
      enabled = true
      bind-address = "0.0.0.0:8086"
      auth-enabled = false
      log-enabled = true
      write-tracing = false
      pprof-enabled = true
      debug-pprof-enabled = false
      https-enabled = false
      https-certificate = "/etc/ssl/influxdb.pem"
      https-private-key = ""
      max-row-limit = 0
      max-connection-limit = 0
      shared-secret = ""
      realm = "InfluxDB"
      unix-socket-enabled = false
      bind-socket = "/var/run/influxdb.sock"
      max-body-size = 25000000
      access-log-path = ""
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: influx:cluster:viewer
  labels:
    rbac.authorization.k8s.io/aggregate-view-telegraf: "true"
rules:
  - apiGroups: [""]
    resources: ["persistentvolumes", "nodes", "pods"]
    verbs: ["get", "list"]

---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: influx:telegraf
aggregationRule:
  clusterRoleSelectors:
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-view-telegraf: "true"
    - matchLabels:
        rbac.authorization.k8s.io/aggregate-to-view: "true"
rules: [] # Rules are automatically filled in by the controller manager.
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: influx:telegraf:viewer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: influx:telegraf
subjects:
  - kind: ServiceAccount
    name: telegraf
    namespace: default